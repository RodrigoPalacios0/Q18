# -*- coding: utf-8 -*-
"""Q18_1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12t6Nl5t9jFx6Z8FgjPIxCZEYg944ldAi
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# Set plot style
plt.style.use('seaborn-v0_8')

# Read Excel file
try:
    df = pd.read_excel('Q_18.xlsx')
except FileNotFoundError:
    print("Error: File 'Q_18.xlsx' not found. Please ensure it is uploaded to the Colab environment.")
    raise

# Identify PDI column (case-insensitive search)
pdi_col = [col for col in df.columns if 'PDI' in col.upper() or 'PERSONAL DISPOSABLE INCOME' in col.upper()]
if not pdi_col:
    print("Error: No column containing 'PDI' or 'PERSONAL DISPOSABLE INCOME' found in the Excel file.")
    print("Available columns:", df.columns.tolist())
    raise ValueError("PDI column not found.")
pdi_col = pdi_col[0]
pdi = df[pdi_col].dropna()

# Plot original PDI time series
plt.figure(figsize=(12, 6))
plt.plot(pdi, label='PDI')
plt.title('Personal Disposable Income Time Series')
plt.xlabel('Time')
plt.ylabel('PDI')
plt.legend()
plt.tight_layout()
plt.show()

# Perform ADF test
adf_result = adfuller(pdi)
print('ADF Test Results:')
print(f'ADF Statistic: {adf_result[0]:.4f}')
print(f'p-value: {adf_result[1]:.4f}')
print('Critical Values:')
for key, value in adf_result[4].items():
    print(f'   {key}: {value:.4f}')
print('\nInterpretation:')
if adf_result[1] < 0.05:
    print('The series is likely stationary (p-value < 0.05).')
else:
    print('The series is likely non-stationary (p-value >= 0.05).')

# Generate ACF and PACF plots
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
plot_acf(pdi, ax=ax1, lags=20)
ax1.set_title('Autocorrelation Function (ACF)')
plot_pacf(pdi, ax=ax2, lags=20)
ax2.set_title('Partial Autocorrelation Function (PACF)')
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# Set plot style to a valid matplotlib style
plt.style.use('ggplot')  # Using 'ggplot' as a fallback; alternatively, use 'seaborn-v0_8' if seaborn is preferred

# Read Excel file
try:
    df = pd.read_excel('Q_18.xlsx')
except FileNotFoundError:
    print("Error: File 'Q_18.xlsx' not found. Please ensure it is uploaded to the Colab environment.")
    raise

# Identify PDI column (case-insensitive search)
pdi_col = [col for col in df.columns if 'PDI' in col.upper() or 'PERSONAL DISPOSABLE INCOME' in col.upper()]
if not pdi_col:
    print("Error: No column containing 'PDI' or 'PERSONAL DISPOSABLE INCOME' found in the Excel file.")
    print("Available columns:", df.columns.tolist())
    raise ValueError("PDI column not found.")
pdi_col = pdi_col[0]
pdi = df[pdi_col].dropna()

# Compute natural logarithm of PDI
log_pdi = np.log(pdi)

# Plot log-transformed time series
plt.figure(figsize=(12, 6))
plt.plot(log_pdi, label='Log PDI')
plt.title('Log-Transformed Personal Disposable Income')
plt.xlabel('Time')
plt.ylabel('Log PDI')
plt.legend()
plt.tight_layout()
plt.show()

# Perform ADF test
adf_result = adfuller(log_pdi)
print('ADF Test Results:')
print(f'ADF Statistic: {adf_result[0]:.4f}')
print(f'p-value: {adf_result[1]:.4f}')
print('Critical Values:')
for key, value in adf_result[4].items():
    print(f'   {key}: {value:.4f}')
print('\nInterpretation:')
if adf_result[1] < 0.05:
    print('The series is likely stationary (p-value < 0.05).')
else:
    print('The series is likely non-stationary (p-value >= 0.05).')

# Generate ACF and PACF plots
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
plot_acf(log_pdi, ax=ax1, lags=20)
ax1.set_title('Autocorrelation Function (ACF)')
plot_pacf(log_pdi, ax=ax2, lags=20)
ax2.set_title('Partial Autocorrelation Function (PACF)')
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# Set plot style
plt.style.use('seaborn-v0_8')

# Read Excel file
try:
    df = pd.read_excel('Q_18.xlsx')
except FileNotFoundError:
    print("Error: File 'Q_18.xlsx' not found. Please ensure it is uploaded to the Colab environment.")
    raise

# Identify PDI column (case-insensitive search)
pdi_col = [col for col in df.columns if 'PDI' in col.upper() or 'PERSONAL DISPOSABLE INCOME' in col.upper()]
if not pdi_col:
    print("Error: No column containing 'PDI' or 'PERSONAL DISPOSABLE INCOME' found in the Excel file.")
    print("Available columns:", df.columns.tolist())
    raise ValueError("PDI column not found.")
pdi_col = pdi_col[0]
pdi = df[pdi_col].dropna()

# Compute natural logarithm of PDI
log_pdi = np.log(pdi)

# Apply first-order differencing
log_pdi_diff = log_pdi.diff().dropna()

# Perform ADF test on differenced series
adf_result = adfuller(log_pdi_diff)
print('ADF Test Results for First-Differenced Log PDI:')
print(f'ADF Statistic: {adf_result[0]:.4f}')
print(f'p-value: {adf_result[1]:.4f}')
print('Critical Values:')
for key, value in adf_result[4].items():
    print(f'   {key}: {value:.4f}')
print('\nInterpretation:')
if adf_result[1] < 0.05:
    print('The differenced series is likely stationary (p-value < 0.05).')
else:
    print('The differenced series is likely non-stationary (p-value >= 0.05).')

# Generate ACF and PACF plots for differenced series
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
plot_acf(log_pdi_diff, ax=ax1, lags=20)
ax1.set_title('Autocorrelation Function (ACF) of First-Differenced Log PDI')
plot_pacf(log_pdi_diff, ax=ax2, lags=20)
ax2.set_title('Partial Autocorrelation Function (PACF) of First-Differenced Log PDI')
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf

# Set plot style
plt.style.use('seaborn-v0_8')

# Read Excel file
try:
    df = pd.read_excel('Q_18.xlsx')
except FileNotFoundError:
    print("Error: File 'Q_18.xlsx' not found. Please ensure it is uploaded to the Colab environment.")
    raise

# Identify PDI column (case-insensitive search)
pdi_col = [col for col in df.columns if 'PDI' in col.upper() or 'PERSONAL DISPOSABLE INCOME' in col.upper()]
if not pdi_col:
    print("Error: No column containing 'PDI' or 'PERSONAL DISPOSABLE INCOME' found in the Excel file.")
    print("Available columns:", df.columns.tolist())
    raise ValueError("PDI column not found.")
pdi_col = pdi_col[0]
pdi = df[pdi_col].dropna()

# Compute natural logarithm of PDI
log_pdi = np.log(pdi)

# Fit ARIMA(1,1,1) model to log-transformed PDI
try:
    model = ARIMA(log_pdi, order=(1, 1, 1))
    model_fit = model.fit()
except Exception as e:
    print(f"Error fitting ARIMA model: {e}")
    raise

# Display model summary
print(model_fit.summary())

# Extract residuals
residuals = model_fit.resid

# Plot residuals time series
plt.figure(figsize=(12, 6))
plt.plot(residuals, label='Residuals')
plt.title('Residuals of ARIMA(1,1,1) Model')
plt.xlabel('Time')
plt.ylabel('Residuals')
plt.legend()
plt.tight_layout()
plt.show()

# Plot histogram of residuals
plt.figure(figsize=(12, 6))
sns.histplot(residuals, kde=True, bins=30)
plt.title('Histogram of ARIMA(1,1,1) Model Residuals')
plt.xlabel('Residuals')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Plot ACF of residuals
plt.figure(figsize=(12, 6))
plot_acf(residuals, lags=20, ax=plt.gca())
plt.title('Autocorrelation Function (ACF) of ARIMA(1,1,1) Model Residuals')
plt.tight_layout()
plt.show()

# Instalar nbconvert si no est√° instalado
!pip install nbconvert

# Convertir notebook a HTML
!jupyter nbconvert --to html /content/Q18_1.ipynb

# Descargar el archivo HTML
from google.colab import files
files.download("Q18_1.html")